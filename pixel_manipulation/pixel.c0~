/* The pixel type and an interface to pixels */

typedef int pixel;

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0x00 <= \result && \result <= 0xff;
{
        return (p>>16) & 0xff;
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0x00<= \result && \result <= 0xff;
{
        return (p>>8)& 0xff;
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0x00<= \result && \result <= 0xff;
{
        return p & 0xff;
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 0x00 <= \result && \result <= 0xff;
{
        return (p>>24)& 0xff;
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0x00<= alpha && alpha <= 0xff;
//@requires 0x00<= red && red <= 0xff;
//@requires 0x00<= green && green <= 0xff;
//@requires 0x00<= blue && blue <= 0xff;
{
int ar =(alpha <<8) + red;
int arg= (ar <<8) + green;
int argb= (arg <<8) +blue;
return argb;
}
