C0 C0 FF EE       # magic number
00 09             # version 4, arch = 1 (64 bits)

00 42             # int pool count
# int pool
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 EE
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 AA
00 00 00 BB
00 00 00 CC
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 F0
00 00 00 F0
00 00 00 F0
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 80
00 00 00 80
00 00 00 80
00 00 00 FF
00 00 00 FF
00 00 00 EE
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 EE
00 00 00 FF
00 00 00 DD
00 00 00 DD
00 00 00 CC
00 00 00 FF
00 00 00 CC
00 00 00 DD
00 00 00 EE
00 00 00 EE
00 00 00 FF
00 00 00 DD
00 00 00 AA
00 00 00 BB
00 00 00 CC
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF

04 9B             # string pool total size
# string pool
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 37 35 2E 33 2D 37 35 2E 36 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:75.3-75.64: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 37 36 2E 33 2D 37 36 2E 36 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:76.3-76.64: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 37 37 2E 33 2D 37 37 2E 36 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:77.3-77.64: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 37 38 2E 33 2D 37 38 2E 36 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:78.3-78.64: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 37 39 2E 33 2D 37 39 2E 36 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:79.3-79.64: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 30 2E 33 2D 31 31 30 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:110.3-110.32: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 31 2E 33 2D 31 31 31 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:111.3-111.32: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 32 2E 33 2D 31 31 32 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:112.3-112.32: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 33 2E 33 2D 31 31 33 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:113.3-113.32: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 35 2E 33 2D 31 31 35 2E 33 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:115.3-115.31: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 36 2E 33 2D 31 31 36 2E 33 30 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:116.3-116.30: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 37 2E 33 2D 31 31 37 2E 33 30 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:117.3-117.30: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 31 38 2E 33 2D 31 31 38 2E 32 39 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:118.3-118.29: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 30 2E 33 2D 31 32 30 2E 33 30 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:120.3-120.30: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 31 2E 33 2D 31 32 31 2E 32 38 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:121.3-121.28: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 32 2E 33 2D 31 32 32 2E 33 30 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:122.3-122.30: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 33 2E 33 2D 31 32 33 2E 32 39 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:123.3-123.29: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 35 2E 33 2D 31 32 35 2E 33 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:125.3-125.31: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 36 2E 33 2D 31 32 36 2E 32 38 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:126.3-126.28: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 37 2E 33 2D 31 32 37 2E 33 30 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:127.3-127.30: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 31 32 38 2E 33 2D 31 32 38 2E 32 39 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:128.3-128.29: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 33 35 2E 33 2D 32 33 35 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:235.3-235.33: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 33 36 2E 33 2D 32 33 36 2E 32 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:236.3-236.27: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 33 37 2E 33 2D 32 33 37 2E 32 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:237.3-237.27: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 33 38 2E 33 2D 32 33 38 2E 32 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:238.3-238.27: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 34 37 2E 33 2D 32 34 37 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:247.3-247.33: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 34 38 2E 33 2D 32 34 38 2E 32 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:248.3-248.27: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 34 39 2E 33 2D 32 34 39 2E 32 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:249.3-249.27: assert failed"
74 65 73 74 73 2F 6F 77 6E 2E 63 30 3A 32 35 30 2E 33 2D 32 35 30 2E 32 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "tests/own.c0:250.3-250.27: assert failed"

00 0F             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 07             # number of local variables = 7
00 21             # code length = 33 bytes
10 11    # bipush 17       # 17
10 22    # bipush 34       # 34
10 33    # bipush 51       # 51
10 44    # bipush 68       # 68
B8 00 05 # invokestatic 5  # make_pixel(17, 34, 51, 68)
36 00    # vstore 0        # p1 = make_pixel(17, 34, 51, 68);
13 00 3E # ildc 62         # c[62] = 255
13 00 3F # ildc 63         # c[63] = 255
13 00 40 # ildc 64         # c[64] = 255
13 00 41 # ildc 65         # c[65] = 255
B8 00 05 # invokestatic 5  # make_pixel(255, 255, 255, 255)
36 01    # vstore 1        # p2 = make_pixel(255, 255, 255, 255);
10 00    # bipush 0        # 0
B0       # return          # 


#<get_red>
00 01             # number of arguments = 1
00 01             # number of local variables = 1
00 0A             # code length = 10 bytes
15 00    # vload 0         # p
10 10    # bipush 16       # 16
7A       # ishr            # (p >> 16)
13 00 00 # ildc 0          # c[0] = 255
7E       # iand            # ((p >> 16) & 255)
B0       # return          # 


#<get_green>
00 01             # number of arguments = 1
00 01             # number of local variables = 1
00 0A             # code length = 10 bytes
15 00    # vload 0         # p
10 08    # bipush 8        # 8
7A       # ishr            # (p >> 8)
13 00 01 # ildc 1          # c[1] = 255
7E       # iand            # ((p >> 8) & 255)
B0       # return          # 


#<get_blue>
00 01             # number of arguments = 1
00 01             # number of local variables = 1
00 07             # code length = 7 bytes
15 00    # vload 0         # p
13 00 02 # ildc 2          # c[2] = 255
7E       # iand            # (p & 255)
B0       # return          # 


#<get_alpha>
00 01             # number of arguments = 1
00 01             # number of local variables = 1
00 0A             # code length = 10 bytes
15 00    # vload 0         # p
10 18    # bipush 24       # 24
7A       # ishr            # (p >> 24)
13 00 03 # ildc 3          # c[3] = 255
7E       # iand            # ((p >> 24) & 255)
B0       # return          # 


#<make_pixel>
00 04             # number of arguments = 4
00 07             # number of local variables = 7
00 21             # code length = 33 bytes
15 00    # vload 0         # alpha
10 08    # bipush 8        # 8
78       # ishl            # (alpha << 8)
15 01    # vload 1         # red
60       # iadd            # ((alpha << 8) + red)
36 04    # vstore 4        # ar = ((alpha << 8) + red);
15 04    # vload 4         # ar
10 08    # bipush 8        # 8
78       # ishl            # (ar << 8)
15 02    # vload 2         # green
60       # iadd            # ((ar << 8) + green)
36 05    # vstore 5        # arg = ((ar << 8) + green);
15 05    # vload 5         # arg
10 08    # bipush 8        # 8
78       # ishl            # (arg << 8)
15 03    # vload 3         # blue
60       # iadd            # ((arg << 8) + blue)
36 06    # vstore 6        # argb = ((arg << 8) + blue);
15 06    # vload 6         # argb
B0       # return          # 


#<remove_red>
00 01             # number of arguments = 1
00 07             # number of local variables = 7
00 25             # code length = 37 bytes
15 00    # vload 0         # p
B8 00 04 # invokestatic 4  # get_alpha(p)
36 01    # vstore 1        # a = get_alpha(p);
10 00    # bipush 0        # 0
36 02    # vstore 2        # r = 0;
15 00    # vload 0         # p
B8 00 02 # invokestatic 2  # get_green(p)
36 03    # vstore 3        # g = get_green(p);
15 00    # vload 0         # p
B8 00 03 # invokestatic 3  # get_blue(p)
36 04    # vstore 4        # b = get_blue(p);
15 01    # vload 1         # a
15 02    # vload 2         # r
15 03    # vload 3         # g
15 04    # vload 4         # b
B8 00 05 # invokestatic 5  # make_pixel(a, r, g, b)
B0       # return          # 


#<remove_red_works>
00 01             # number of arguments = 1
00 07             # number of local variables = 7
00 5F             # code length = 95 bytes
15 00    # vload 0         # p1
B8 00 06 # invokestatic 6  # remove_red(p1)
36 01    # vstore 1        # p2 = remove_red(p1);
15 01    # vload 1         # p2
B8 00 04 # invokestatic 4  # get_alpha(p2)
15 00    # vload 0         # p1
B8 00 04 # invokestatic 4  # get_alpha(p1)
A0 00 06 # if_cmpne +6     # if (get_alpha(p2) != get_alpha(p1)) goto <00:then>
A7 00 09 # goto +9         # goto <01:else>
# <00:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <02:endif>
# <01:else>
# <02:endif>
15 01    # vload 1         # p2
B8 00 01 # invokestatic 1  # get_red(p2)
10 00    # bipush 0        # 0
A0 00 06 # if_cmpne +6     # if (get_red(p2) != 0) goto <03:then>
A7 00 09 # goto +9         # goto <04:else>
# <03:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <05:endif>
# <04:else>
# <05:endif>
15 01    # vload 1         # p2
B8 00 02 # invokestatic 2  # get_green(p2)
15 00    # vload 0         # p1
B8 00 02 # invokestatic 2  # get_green(p1)
A0 00 06 # if_cmpne +6     # if (get_green(p2) != get_green(p1)) goto <06:then>
A7 00 09 # goto +9         # goto <07:else>
# <06:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <08:endif>
# <07:else>
# <08:endif>
15 01    # vload 1         # p2
B8 00 03 # invokestatic 3  # get_blue(p2)
15 00    # vload 0         # p1
B8 00 03 # invokestatic 3  # get_blue(p1)
A0 00 06 # if_cmpne +6     # if (get_blue(p2) != get_blue(p1)) goto <09:then>
A7 00 09 # goto +9         # goto <10:else>
# <09:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <11:endif>
# <10:else>
# <11:endif>
10 01    # bipush 1        # true
B0       # return          # 


#<test_remove_red>
00 00             # number of arguments = 0
00 07             # number of local variables = 7
00 67             # code length = 103 bytes
13 00 04 # ildc 4          # c[4] = 255
10 01    # bipush 1        # 1
10 03    # bipush 3        # 3
10 04    # bipush 4        # 4
B8 00 05 # invokestatic 5  # make_pixel(255, 1, 3, 4)
B8 00 07 # invokestatic 7  # remove_red_works(make_pixel(255, 1, 3, 4))
14 00 00 # aldc 0          # s[0] = "tests/own.c0:75.3-75.64: assert failed"
CF       # assert          # assertremove_red_works(make_pixel(255, 1, 3, 4)) [failure message on stack]
10 02    # bipush 2        # 2
10 00    # bipush 0        # 0
13 00 05 # ildc 5          # c[5] = 255
13 00 06 # ildc 6          # c[6] = 238
B8 00 05 # invokestatic 5  # make_pixel(2, 0, 255, 238)
B8 00 07 # invokestatic 7  # remove_red_works(make_pixel(2, 0, 255, 238))
14 00 27 # aldc 39         # s[39] = "tests/own.c0:76.3-76.64: assert failed"
CF       # assert          # assertremove_red_works(make_pixel(2, 0, 255, 238)) [failure message on stack]
13 00 07 # ildc 7          # c[7] = 255
13 00 08 # ildc 8          # c[8] = 255
13 00 09 # ildc 9          # c[9] = 255
13 00 0A # ildc 10         # c[10] = 255
B8 00 05 # invokestatic 5  # make_pixel(255, 255, 255, 255)
B8 00 07 # invokestatic 7  # remove_red_works(make_pixel(255, 255, 255, 255))
14 00 4E # aldc 78         # s[78] = "tests/own.c0:77.3-77.64: assert failed"
CF       # assert          # assertremove_red_works(make_pixel(255, 255, 255, 255)) [failure message on stack]
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
B8 00 05 # invokestatic 5  # make_pixel(0, 0, 0, 0)
B8 00 07 # invokestatic 7  # remove_red_works(make_pixel(0, 0, 0, 0))
14 00 75 # aldc 117        # s[117] = "tests/own.c0:78.3-78.64: assert failed"
CF       # assert          # assertremove_red_works(make_pixel(0, 0, 0, 0)) [failure message on stack]
10 00    # bipush 0        # 0
13 00 0B # ildc 11         # c[11] = 170
13 00 0C # ildc 12         # c[12] = 187
13 00 0D # ildc 13         # c[13] = 204
B8 00 05 # invokestatic 5  # make_pixel(0, 170, 187, 204)
B8 00 07 # invokestatic 7  # remove_red_works(make_pixel(0, 170, 187, 204))
14 00 9C # aldc 156        # s[156] = "tests/own.c0:79.3-79.64: assert failed"
CF       # assert          # assertremove_red_works(make_pixel(0, 170, 187, 204)) [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<quantize>
00 02             # number of arguments = 2
00 07             # number of local variables = 7
00 5F             # code length = 95 bytes
15 00    # vload 0         # p
B8 00 04 # invokestatic 4  # get_alpha(p)
36 02    # vstore 2        # a = get_alpha(p);
15 00    # vload 0         # p
B8 00 01 # invokestatic 1  # get_red(p)
36 03    # vstore 3        # r = get_red(p);
15 00    # vload 0         # p
B8 00 02 # invokestatic 2  # get_green(p)
36 04    # vstore 4        # g = get_green(p);
15 00    # vload 0         # p
B8 00 03 # invokestatic 3  # get_blue(p)
36 05    # vstore 5        # b = get_blue(p);
15 01    # vload 1         # q
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (q == 0) goto <12:then>
A7 00 12 # goto +18        # goto <13:else>
# <12:then>
15 02    # vload 2         # a
15 03    # vload 3         # r
15 04    # vload 4         # g
15 05    # vload 5         # b
B8 00 05 # invokestatic 5  # make_pixel(a, r, g, b)
B0       # return          # 
A7 00 2D # goto +45        # goto <14:endif>
# <13:else>
15 03    # vload 3         # r
15 01    # vload 1         # q
7A       # ishr            # (r >> q)
15 01    # vload 1         # q
78       # ishl            # ((r >> q) << q)
36 03    # vstore 3        # r = ((r >> q) << q);
15 04    # vload 4         # g
15 01    # vload 1         # q
7A       # ishr            # (g >> q)
15 01    # vload 1         # q
78       # ishl            # ((g >> q) << q)
36 04    # vstore 4        # g = ((g >> q) << q);
15 05    # vload 5         # b
15 01    # vload 1         # q
7A       # ishr            # (b >> q)
15 01    # vload 1         # q
78       # ishl            # ((b >> q) << q)
36 05    # vstore 5        # b = ((b >> q) << q);
15 02    # vload 2         # a
15 03    # vload 3         # r
15 04    # vload 4         # g
15 05    # vload 5         # b
B8 00 05 # invokestatic 5  # make_pixel(a, r, g, b)
B0       # return          # 
# <14:endif>


#<test_quantize>
00 00             # number of arguments = 0
00 07             # number of local variables = 7
01 E3             # code length = 483 bytes
13 00 0E # ildc 14         # c[14] = 255
13 00 0F # ildc 15         # c[15] = 255
13 00 10 # ildc 16         # c[16] = 255
13 00 11 # ildc 17         # c[17] = 255
B8 00 05 # invokestatic 5  # make_pixel(255, 255, 255, 255)
10 04    # bipush 4        # 4
B8 00 09 # invokestatic 9  # quantize(make_pixel(255, 255, 255, 255), 4)
36 00    # vstore 0        # p = quantize(make_pixel(255, 255, 255, 255), 4);
15 00    # vload 0         # p
B8 00 04 # invokestatic 4  # get_alpha(p)
13 00 12 # ildc 18         # c[18] = 255
9F 00 06 # if_cmpeq +6     # if (get_alpha(p) == 255) goto <15:cond_true>
A7 00 08 # goto +8         # goto <16:cond_false>
# <15:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <17:cond_end>
# <16:cond_false>
10 00    # bipush 0        # false
# <17:cond_end>
14 00 C3 # aldc 195        # s[195] = "tests/own.c0:110.3-110.32: assert failed"
CF       # assert          # assert(get_alpha(p) == 255) [failure message on stack]
15 00    # vload 0         # p
B8 00 01 # invokestatic 1  # get_red(p)
13 00 13 # ildc 19         # c[19] = 240
9F 00 06 # if_cmpeq +6     # if (get_red(p) == 240) goto <18:cond_true>
A7 00 08 # goto +8         # goto <19:cond_false>
# <18:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <20:cond_end>
# <19:cond_false>
10 00    # bipush 0        # false
# <20:cond_end>
14 00 EC # aldc 236        # s[236] = "tests/own.c0:111.3-111.32: assert failed"
CF       # assert          # assert(get_red(p) == 240) [failure message on stack]
15 00    # vload 0         # p
B8 00 02 # invokestatic 2  # get_green(p)
13 00 14 # ildc 20         # c[20] = 240
9F 00 06 # if_cmpeq +6     # if (get_green(p) == 240) goto <21:cond_true>
A7 00 08 # goto +8         # goto <22:cond_false>
# <21:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <23:cond_end>
# <22:cond_false>
10 00    # bipush 0        # false
# <23:cond_end>
14 01 15 # aldc 277        # s[277] = "tests/own.c0:112.3-112.32: assert failed"
CF       # assert          # assert(get_green(p) == 240) [failure message on stack]
15 00    # vload 0         # p
B8 00 03 # invokestatic 3  # get_blue(p)
13 00 15 # ildc 21         # c[21] = 240
9F 00 06 # if_cmpeq +6     # if (get_blue(p) == 240) goto <24:cond_true>
A7 00 08 # goto +8         # goto <25:cond_false>
# <24:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <26:cond_end>
# <25:cond_false>
10 00    # bipush 0        # false
# <26:cond_end>
14 01 3E # aldc 318        # s[318] = "tests/own.c0:113.3-113.32: assert failed"
CF       # assert          # assert(get_blue(p) == 240) [failure message on stack]
13 00 16 # ildc 22         # c[22] = 255
13 00 17 # ildc 23         # c[23] = 255
13 00 18 # ildc 24         # c[24] = 255
13 00 19 # ildc 25         # c[25] = 255
B8 00 05 # invokestatic 5  # make_pixel(255, 255, 255, 255)
10 00    # bipush 0        # 0
B8 00 09 # invokestatic 9  # quantize(make_pixel(255, 255, 255, 255), 0)
36 01    # vstore 1        # l = quantize(make_pixel(255, 255, 255, 255), 0);
15 01    # vload 1         # l
B8 00 04 # invokestatic 4  # get_alpha(l)
13 00 1A # ildc 26         # c[26] = 255
9F 00 06 # if_cmpeq +6     # if (get_alpha(l) == 255) goto <27:cond_true>
A7 00 08 # goto +8         # goto <28:cond_false>
# <27:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <29:cond_end>
# <28:cond_false>
10 00    # bipush 0        # false
# <29:cond_end>
14 01 67 # aldc 359        # s[359] = "tests/own.c0:115.3-115.31: assert failed"
CF       # assert          # assert(get_alpha(l) == 255) [failure message on stack]
15 01    # vload 1         # l
B8 00 01 # invokestatic 1  # get_red(l)
13 00 1B # ildc 27         # c[27] = 255
9F 00 06 # if_cmpeq +6     # if (get_red(l) == 255) goto <30:cond_true>
A7 00 08 # goto +8         # goto <31:cond_false>
# <30:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <32:cond_end>
# <31:cond_false>
10 00    # bipush 0        # false
# <32:cond_end>
14 01 90 # aldc 400        # s[400] = "tests/own.c0:116.3-116.30: assert failed"
CF       # assert          # assert(get_red(l) == 255) [failure message on stack]
15 01    # vload 1         # l
B8 00 02 # invokestatic 2  # get_green(l)
13 00 1C # ildc 28         # c[28] = 255
9F 00 06 # if_cmpeq +6     # if (get_green(l) == 255) goto <33:cond_true>
A7 00 08 # goto +8         # goto <34:cond_false>
# <33:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <35:cond_end>
# <34:cond_false>
10 00    # bipush 0        # false
# <35:cond_end>
14 01 B9 # aldc 441        # s[441] = "tests/own.c0:117.3-117.30: assert failed"
CF       # assert          # assert(get_green(l) == 255) [failure message on stack]
15 01    # vload 1         # l
B8 00 03 # invokestatic 3  # get_blue(l)
13 00 1D # ildc 29         # c[29] = 255
9F 00 06 # if_cmpeq +6     # if (get_blue(l) == 255) goto <36:cond_true>
A7 00 08 # goto +8         # goto <37:cond_false>
# <36:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <38:cond_end>
# <37:cond_false>
10 00    # bipush 0        # false
# <38:cond_end>
14 01 E2 # aldc 482        # s[482] = "tests/own.c0:118.3-118.29: assert failed"
CF       # assert          # assert(get_blue(l) == 255) [failure message on stack]
13 00 1E # ildc 30         # c[30] = 255
13 00 1F # ildc 31         # c[31] = 255
13 00 20 # ildc 32         # c[32] = 255
13 00 21 # ildc 33         # c[33] = 255
B8 00 05 # invokestatic 5  # make_pixel(255, 255, 255, 255)
10 07    # bipush 7        # 7
B8 00 09 # invokestatic 9  # quantize(make_pixel(255, 255, 255, 255), 7)
36 02    # vstore 2        # k = quantize(make_pixel(255, 255, 255, 255), 7);
15 02    # vload 2         # k
B8 00 04 # invokestatic 4  # get_alpha(k)
13 00 22 # ildc 34         # c[34] = 255
9F 00 06 # if_cmpeq +6     # if (get_alpha(k) == 255) goto <39:cond_true>
A7 00 08 # goto +8         # goto <40:cond_false>
# <39:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <41:cond_end>
# <40:cond_false>
10 00    # bipush 0        # false
# <41:cond_end>
14 02 0B # aldc 523        # s[523] = "tests/own.c0:120.3-120.30: assert failed"
CF       # assert          # assert(get_alpha(k) == 255) [failure message on stack]
15 02    # vload 2         # k
B8 00 01 # invokestatic 1  # get_red(k)
13 00 23 # ildc 35         # c[35] = 128
9F 00 06 # if_cmpeq +6     # if (get_red(k) == 128) goto <42:cond_true>
A7 00 08 # goto +8         # goto <43:cond_false>
# <42:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <44:cond_end>
# <43:cond_false>
10 00    # bipush 0        # false
# <44:cond_end>
14 02 34 # aldc 564        # s[564] = "tests/own.c0:121.3-121.28: assert failed"
CF       # assert          # assert(get_red(k) == 128) [failure message on stack]
15 02    # vload 2         # k
B8 00 02 # invokestatic 2  # get_green(k)
13 00 24 # ildc 36         # c[36] = 128
9F 00 06 # if_cmpeq +6     # if (get_green(k) == 128) goto <45:cond_true>
A7 00 08 # goto +8         # goto <46:cond_false>
# <45:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <47:cond_end>
# <46:cond_false>
10 00    # bipush 0        # false
# <47:cond_end>
14 02 5D # aldc 605        # s[605] = "tests/own.c0:122.3-122.30: assert failed"
CF       # assert          # assert(get_green(k) == 128) [failure message on stack]
15 02    # vload 2         # k
B8 00 03 # invokestatic 3  # get_blue(k)
13 00 25 # ildc 37         # c[37] = 128
9F 00 06 # if_cmpeq +6     # if (get_blue(k) == 128) goto <48:cond_true>
A7 00 08 # goto +8         # goto <49:cond_false>
# <48:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <50:cond_end>
# <49:cond_false>
10 00    # bipush 0        # false
# <50:cond_end>
14 02 86 # aldc 646        # s[646] = "tests/own.c0:123.3-123.29: assert failed"
CF       # assert          # assert(get_blue(k) == 128) [failure message on stack]
10 12    # bipush 18       # 18
10 34    # bipush 52       # 52
10 56    # bipush 86       # 86
10 78    # bipush 120      # 120
B8 00 05 # invokestatic 5  # make_pixel(18, 52, 86, 120)
10 06    # bipush 6        # 6
B8 00 09 # invokestatic 9  # quantize(make_pixel(18, 52, 86, 120), 6)
36 03    # vstore 3        # j = quantize(make_pixel(18, 52, 86, 120), 6);
15 03    # vload 3         # j
B8 00 04 # invokestatic 4  # get_alpha(j)
10 12    # bipush 18       # 18
9F 00 06 # if_cmpeq +6     # if (get_alpha(j) == 18) goto <51:cond_true>
A7 00 08 # goto +8         # goto <52:cond_false>
# <51:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <53:cond_end>
# <52:cond_false>
10 00    # bipush 0        # false
# <53:cond_end>
14 02 AF # aldc 687        # s[687] = "tests/own.c0:125.3-125.31: assert failed"
CF       # assert          # assert(get_alpha(j) == 18) [failure message on stack]
15 03    # vload 3         # j
B8 00 01 # invokestatic 1  # get_red(j)
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (get_red(j) == 0) goto <54:cond_true>
A7 00 08 # goto +8         # goto <55:cond_false>
# <54:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <56:cond_end>
# <55:cond_false>
10 00    # bipush 0        # false
# <56:cond_end>
14 02 D8 # aldc 728        # s[728] = "tests/own.c0:126.3-126.28: assert failed"
CF       # assert          # assert(get_red(j) == 0) [failure message on stack]
15 03    # vload 3         # j
B8 00 02 # invokestatic 2  # get_green(j)
10 40    # bipush 64       # 64
9F 00 06 # if_cmpeq +6     # if (get_green(j) == 64) goto <57:cond_true>
A7 00 08 # goto +8         # goto <58:cond_false>
# <57:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <59:cond_end>
# <58:cond_false>
10 00    # bipush 0        # false
# <59:cond_end>
14 03 01 # aldc 769        # s[769] = "tests/own.c0:127.3-127.30: assert failed"
CF       # assert          # assert(get_green(j) == 64) [failure message on stack]
15 03    # vload 3         # j
B8 00 03 # invokestatic 3  # get_blue(j)
10 40    # bipush 64       # 64
9F 00 06 # if_cmpeq +6     # if (get_blue(j) == 64) goto <60:cond_true>
A7 00 08 # goto +8         # goto <61:cond_false>
# <60:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <62:cond_end>
# <61:cond_false>
10 00    # bipush 0        # false
# <62:cond_end>
14 03 2A # aldc 810        # s[810] = "tests/own.c0:128.3-128.29: assert failed"
CF       # assert          # assert(get_blue(j) == 64) [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<count_zeroes>
00 03             # number of arguments = 3
00 07             # number of local variables = 7
00 A4             # code length = 164 bytes
10 00    # bipush 0        # 0
36 03    # vstore 3        # i = 0;
# <63:loop>
15 03    # vload 3         # i
10 03    # bipush 3        # 3
A1 00 06 # if_icmplt +6    # if (i < 3) goto <64:body>
A7 00 15 # goto +21        # goto <65:exit>
# <64:body>
15 02    # vload 2         # results
15 03    # vload 3         # i
63       # aadds           # &results[i]
10 00    # bipush 0        # 0
4E       # imstore         # results[i] = 0;
15 03    # vload 3         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 03    # vstore 3        # i += 1;
A7 FF E7 # goto -25        # goto <63:loop>
# <65:exit>
10 00    # bipush 0        # 0
36 03    # vstore 3        # i = 0;
# <66:loop>
15 03    # vload 3         # i
15 01    # vload 1         # length
A1 00 06 # if_icmplt +6    # if (i < length) goto <67:body>
A7 00 76 # goto +118       # goto <68:exit>
# <67:body>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 01 # invokestatic 1  # get_red(A[i])
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (get_red(A[i]) == 0) goto <69:then>
A7 00 15 # goto +21        # goto <70:else>
# <69:then>
15 02    # vload 2         # results
10 00    # bipush 0        # 0
63       # aadds           # &results[0]
15 02    # vload 2         # results
10 00    # bipush 0        # 0
63       # aadds           # &results[0]
2E       # imload          # results[0]
10 01    # bipush 1        # 1
60       # iadd            # (results[0] + 1)
4E       # imstore         # results[0] = (results[0] + 1);
A7 00 03 # goto +3         # goto <71:endif>
# <70:else>
# <71:endif>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 02 # invokestatic 2  # get_green(A[i])
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (get_green(A[i]) == 0) goto <72:then>
A7 00 15 # goto +21        # goto <73:else>
# <72:then>
15 02    # vload 2         # results
10 01    # bipush 1        # 1
63       # aadds           # &results[1]
15 02    # vload 2         # results
10 01    # bipush 1        # 1
63       # aadds           # &results[1]
2E       # imload          # results[1]
10 01    # bipush 1        # 1
60       # iadd            # (results[1] + 1)
4E       # imstore         # results[1] = (results[1] + 1);
A7 00 03 # goto +3         # goto <74:endif>
# <73:else>
# <74:endif>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 03 # invokestatic 3  # get_blue(A[i])
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (get_blue(A[i]) == 0) goto <75:then>
A7 00 15 # goto +21        # goto <76:else>
# <75:then>
15 02    # vload 2         # results
10 02    # bipush 2        # 2
63       # aadds           # &results[2]
15 02    # vload 2         # results
10 02    # bipush 2        # 2
63       # aadds           # &results[2]
2E       # imload          # results[2]
10 01    # bipush 1        # 1
60       # iadd            # (results[2] + 1)
4E       # imstore         # results[2] = (results[2] + 1);
A7 00 03 # goto +3         # goto <77:endif>
# <76:else>
# <77:endif>
15 03    # vload 3         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 03    # vstore 3        # i += 1;
A7 FF 86 # goto -122       # goto <66:loop>
# <68:exit>
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<copy_pixels>
00 02             # number of arguments = 2
00 07             # number of local variables = 7
00 2D             # code length = 45 bytes
15 01    # vload 1         # length
BC 04    # newarray 4      # alloc_array(pixel, length)
36 02    # vstore 2        # B = alloc_array(pixel, length);
10 00    # bipush 0        # 0
36 03    # vstore 3        # i = 0;
# <78:loop>
15 03    # vload 3         # i
15 01    # vload 1         # length
A1 00 06 # if_icmplt +6    # if (i < length) goto <79:body>
A7 00 19 # goto +25        # goto <80:exit>
# <79:body>
15 02    # vload 2         # B
15 03    # vload 3         # i
63       # aadds           # &B[i]
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
4E       # imstore         # B[i] = A[i];
15 03    # vload 3         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 03    # vstore 3        # i += 1;
A7 FF E3 # goto -29        # goto <78:loop>
# <80:exit>
15 02    # vload 2         # B
B0       # return          # 


#<pixels_equal>
00 03             # number of arguments = 3
00 07             # number of local variables = 7
00 93             # code length = 147 bytes
10 00    # bipush 0        # 0
36 03    # vstore 3        # i = 0;
# <81:loop>
15 03    # vload 3         # i
15 02    # vload 2         # length
A1 00 06 # if_icmplt +6    # if (i < length) goto <82:body>
A7 00 85 # goto +133       # goto <83:exit>
# <82:body>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 04 # invokestatic 4  # get_alpha(A[i])
15 01    # vload 1         # B
15 03    # vload 3         # i
63       # aadds           # &B[i]
2E       # imload          # B[i]
B8 00 04 # invokestatic 4  # get_alpha(B[i])
A0 00 06 # if_cmpne +6     # if (get_alpha(A[i]) != get_alpha(B[i])) goto <84:then>
A7 00 09 # goto +9         # goto <85:else>
# <84:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <86:endif>
# <85:else>
# <86:endif>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 01 # invokestatic 1  # get_red(A[i])
15 01    # vload 1         # B
15 03    # vload 3         # i
63       # aadds           # &B[i]
2E       # imload          # B[i]
B8 00 01 # invokestatic 1  # get_red(B[i])
A0 00 06 # if_cmpne +6     # if (get_red(A[i]) != get_red(B[i])) goto <87:then>
A7 00 09 # goto +9         # goto <88:else>
# <87:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <89:endif>
# <88:else>
# <89:endif>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 02 # invokestatic 2  # get_green(A[i])
15 01    # vload 1         # B
15 03    # vload 3         # i
63       # aadds           # &B[i]
2E       # imload          # B[i]
B8 00 02 # invokestatic 2  # get_green(B[i])
A0 00 06 # if_cmpne +6     # if (get_green(A[i]) != get_green(B[i])) goto <90:then>
A7 00 09 # goto +9         # goto <91:else>
# <90:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <92:endif>
# <91:else>
# <92:endif>
15 00    # vload 0         # A
15 03    # vload 3         # i
63       # aadds           # &A[i]
2E       # imload          # A[i]
B8 00 03 # invokestatic 3  # get_blue(A[i])
15 01    # vload 1         # B
15 03    # vload 3         # i
63       # aadds           # &B[i]
2E       # imload          # B[i]
B8 00 03 # invokestatic 3  # get_blue(B[i])
A0 00 06 # if_cmpne +6     # if (get_blue(A[i]) != get_blue(B[i])) goto <93:then>
A7 00 09 # goto +9         # goto <94:else>
# <93:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <95:endif>
# <94:else>
# <95:endif>
15 03    # vload 3         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 03    # vstore 3        # i += 1;
A7 FF 77 # goto -137       # goto <81:loop>
# <83:exit>
10 01    # bipush 1        # true
B0       # return          # 


#<test_count_zeroes>
00 00             # number of arguments = 0
00 07             # number of local variables = 7
01 AF             # code length = 431 bytes
10 03    # bipush 3        # 3
BC 04    # newarray 4      # alloc_array(int, 3)
36 02    # vstore 2        # results = alloc_array(int, 3);
10 09    # bipush 9        # 9
BC 04    # newarray 4      # alloc_array(pixel, 9)
36 00    # vstore 0        # A = alloc_array(pixel, 9);
15 00    # vload 0         # A
10 00    # bipush 0        # 0
63       # aadds           # &A[0]
13 00 26 # ildc 38         # c[38] = 255
10 01    # bipush 1        # 1
10 03    # bipush 3        # 3
10 04    # bipush 4        # 4
B8 00 05 # invokestatic 5  # make_pixel(255, 1, 3, 4)
4E       # imstore         # A[0] = make_pixel(255, 1, 3, 4);
15 00    # vload 0         # A
10 01    # bipush 1        # 1
63       # aadds           # &A[1]
10 02    # bipush 2        # 2
10 00    # bipush 0        # 0
13 00 27 # ildc 39         # c[39] = 255
13 00 28 # ildc 40         # c[40] = 238
B8 00 05 # invokestatic 5  # make_pixel(2, 0, 255, 238)
4E       # imstore         # A[1] = make_pixel(2, 0, 255, 238);
15 00    # vload 0         # A
10 02    # bipush 2        # 2
63       # aadds           # &A[2]
13 00 29 # ildc 41         # c[41] = 255
13 00 2A # ildc 42         # c[42] = 255
13 00 2B # ildc 43         # c[43] = 255
13 00 2C # ildc 44         # c[44] = 255
B8 00 05 # invokestatic 5  # make_pixel(255, 255, 255, 255)
4E       # imstore         # A[2] = make_pixel(255, 255, 255, 255);
15 00    # vload 0         # A
10 03    # bipush 3        # 3
63       # aadds           # &A[3]
13 00 2D # ildc 45         # c[45] = 238
13 00 2E # ildc 46         # c[46] = 255
13 00 2F # ildc 47         # c[47] = 221
10 00    # bipush 0        # 0
B8 00 05 # invokestatic 5  # make_pixel(238, 255, 221, 0)
4E       # imstore         # A[3] = make_pixel(238, 255, 221, 0);
15 00    # vload 0         # A
10 04    # bipush 4        # 4
63       # aadds           # &A[4]
13 00 30 # ildc 48         # c[48] = 221
13 00 31 # ildc 49         # c[49] = 204
10 00    # bipush 0        # 0
13 00 32 # ildc 50         # c[50] = 255
B8 00 05 # invokestatic 5  # make_pixel(221, 204, 0, 255)
4E       # imstore         # A[4] = make_pixel(221, 204, 0, 255);
15 00    # vload 0         # A
10 05    # bipush 5        # 5
63       # aadds           # &A[5]
13 00 33 # ildc 51         # c[51] = 204
10 00    # bipush 0        # 0
13 00 34 # ildc 52         # c[52] = 221
13 00 35 # ildc 53         # c[53] = 238
B8 00 05 # invokestatic 5  # make_pixel(204, 0, 221, 238)
4E       # imstore         # A[5] = make_pixel(204, 0, 221, 238);
15 00    # vload 0         # A
10 06    # bipush 6        # 6
63       # aadds           # &A[6]
10 00    # bipush 0        # 0
13 00 36 # ildc 54         # c[54] = 238
13 00 37 # ildc 55         # c[55] = 255
13 00 38 # ildc 56         # c[56] = 221
B8 00 05 # invokestatic 5  # make_pixel(0, 238, 255, 221)
4E       # imstore         # A[6] = make_pixel(0, 238, 255, 221);
15 00    # vload 0         # A
10 07    # bipush 7        # 7
63       # aadds           # &A[7]
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
B8 00 05 # invokestatic 5  # make_pixel(0, 0, 0, 0)
4E       # imstore         # A[7] = make_pixel(0, 0, 0, 0);
15 00    # vload 0         # A
10 08    # bipush 8        # 8
63       # aadds           # &A[8]
10 00    # bipush 0        # 0
13 00 39 # ildc 57         # c[57] = 170
13 00 3A # ildc 58         # c[58] = 187
13 00 3B # ildc 59         # c[59] = 204
B8 00 05 # invokestatic 5  # make_pixel(0, 170, 187, 204)
4E       # imstore         # A[8] = make_pixel(0, 170, 187, 204);
15 00    # vload 0         # A
10 09    # bipush 9        # 9
B8 00 0C # invokestatic 12 # copy_pixels(A, 9)
36 01    # vstore 1        # C = copy_pixels(A, 9);
15 00    # vload 0         # A
10 09    # bipush 9        # 9
15 02    # vload 2         # results
B8 00 0B # invokestatic 11 # count_zeroes(A, 9, results)
57       # pop             # (ignore result)
15 00    # vload 0         # A
15 01    # vload 1         # C
10 09    # bipush 9        # 9
B8 00 0D # invokestatic 13 # pixels_equal(A, C, 9)
14 03 53 # aldc 851        # s[851] = "tests/own.c0:235.3-235.33: assert failed"
CF       # assert          # assertpixels_equal(A, C, 9) [failure message on stack]
15 02    # vload 2         # results
10 00    # bipush 0        # 0
63       # aadds           # &results[0]
2E       # imload          # results[0]
10 03    # bipush 3        # 3
9F 00 06 # if_cmpeq +6     # if (results[0] == 3) goto <96:cond_true>
A7 00 08 # goto +8         # goto <97:cond_false>
# <96:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <98:cond_end>
# <97:cond_false>
10 00    # bipush 0        # false
# <98:cond_end>
14 03 7C # aldc 892        # s[892] = "tests/own.c0:236.3-236.27: assert failed"
CF       # assert          # assert(results[0] == 3) [failure message on stack]
15 02    # vload 2         # results
10 01    # bipush 1        # 1
63       # aadds           # &results[1]
2E       # imload          # results[1]
10 02    # bipush 2        # 2
9F 00 06 # if_cmpeq +6     # if (results[1] == 2) goto <99:cond_true>
A7 00 08 # goto +8         # goto <100:cond_false>
# <99:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <101:cond_end>
# <100:cond_false>
10 00    # bipush 0        # false
# <101:cond_end>
14 03 A5 # aldc 933        # s[933] = "tests/own.c0:237.3-237.27: assert failed"
CF       # assert          # assert(results[1] == 2) [failure message on stack]
15 02    # vload 2         # results
10 02    # bipush 2        # 2
63       # aadds           # &results[2]
2E       # imload          # results[2]
10 02    # bipush 2        # 2
9F 00 06 # if_cmpeq +6     # if (results[2] == 2) goto <102:cond_true>
A7 00 08 # goto +8         # goto <103:cond_false>
# <102:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <104:cond_end>
# <103:cond_false>
10 00    # bipush 0        # false
# <104:cond_end>
14 03 CE # aldc 974        # s[974] = "tests/own.c0:238.3-238.27: assert failed"
CF       # assert          # assert(results[2] == 2) [failure message on stack]
15 00    # vload 0         # A
10 02    # bipush 2        # 2
63       # aadds           # &A[2]
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
13 00 3C # ildc 60         # c[60] = 255
B8 00 05 # invokestatic 5  # make_pixel(0, 0, 0, 255)
4E       # imstore         # A[2] = make_pixel(0, 0, 0, 255);
15 01    # vload 1         # C
10 02    # bipush 2        # 2
63       # aadds           # &C[2]
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
10 00    # bipush 0        # 0
13 00 3D # ildc 61         # c[61] = 255
B8 00 05 # invokestatic 5  # make_pixel(0, 0, 0, 255)
4E       # imstore         # C[2] = make_pixel(0, 0, 0, 255);
15 00    # vload 0         # A
10 09    # bipush 9        # 9
15 02    # vload 2         # results
B8 00 0B # invokestatic 11 # count_zeroes(A, 9, results)
57       # pop             # (ignore result)
15 00    # vload 0         # A
15 01    # vload 1         # C
10 09    # bipush 9        # 9
B8 00 0D # invokestatic 13 # pixels_equal(A, C, 9)
14 03 F7 # aldc 1015       # s[1015] = "tests/own.c0:247.3-247.33: assert failed"
CF       # assert          # assertpixels_equal(A, C, 9) [failure message on stack]
15 02    # vload 2         # results
10 00    # bipush 0        # 0
63       # aadds           # &results[0]
2E       # imload          # results[0]
10 04    # bipush 4        # 4
9F 00 06 # if_cmpeq +6     # if (results[0] == 4) goto <105:cond_true>
A7 00 08 # goto +8         # goto <106:cond_false>
# <105:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <107:cond_end>
# <106:cond_false>
10 00    # bipush 0        # false
# <107:cond_end>
14 04 20 # aldc 1056       # s[1056] = "tests/own.c0:248.3-248.27: assert failed"
CF       # assert          # assert(results[0] == 4) [failure message on stack]
15 02    # vload 2         # results
10 01    # bipush 1        # 1
63       # aadds           # &results[1]
2E       # imload          # results[1]
10 03    # bipush 3        # 3
9F 00 06 # if_cmpeq +6     # if (results[1] == 3) goto <108:cond_true>
A7 00 08 # goto +8         # goto <109:cond_false>
# <108:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <110:cond_end>
# <109:cond_false>
10 00    # bipush 0        # false
# <110:cond_end>
14 04 49 # aldc 1097       # s[1097] = "tests/own.c0:249.3-249.27: assert failed"
CF       # assert          # assert(results[1] == 3) [failure message on stack]
15 02    # vload 2         # results
10 02    # bipush 2        # 2
63       # aadds           # &results[2]
2E       # imload          # results[2]
10 02    # bipush 2        # 2
9F 00 06 # if_cmpeq +6     # if (results[2] == 2) goto <111:cond_true>
A7 00 08 # goto +8         # goto <112:cond_false>
# <111:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <113:cond_end>
# <112:cond_false>
10 00    # bipush 0        # false
# <113:cond_end>
14 04 72 # aldc 1138       # s[1138] = "tests/own.c0:250.3-250.27: assert failed"
CF       # assert          # assert(results[2] == 2) [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 

00 00             # native count
# native pool

